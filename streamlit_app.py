# -*- coding: utf-8 -*-
"""Streamlit_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13gSWshLBrQ5utCQD9IVsniFpVO_dlFRb
"""
import streamlit as st
import torch
from transformers import AutoTokenizer, BertTokenizer, BertForSequenceClassification
import pandas as pd
import numpy as np
from torch.utils.data import Dataset, DataLoader
import requests
import zipfile
import io

# Download file from Google Drive
def download_file_from_google_drive(file_id, destination):
    URL = f"https://drive.google.com/uc?export=download&id={file_id}"
    response = requests.get(URL, stream=True)
    if response.status_code == 200:
        with open(destination, "wb") as f:
            for chunk in response.iter_content(1024):
                if chunk:
                    f.write(chunk)
    else:
        st.error("Failed to download file.")

# Load the model
def load_model(model_path):
    model = BertForSequenceClassification.from_pretrained("bert-base-uncased", num_labels=5)
    model.load_state_dict(torch.load(model_path, map_location=torch.device('cpu')), strict=False)
    model.eval()
    return model

# Function to get a single prediction
def get_single_prediction(text, model):
    df = pd.DataFrame()
    df['text'] = [text]
    df['stars'] = ['0']

    dataset = ReviewsDataset(df)

    TEST_BATCH_SIZE = 1
    NUM_WORKERS = 1

    test_params = {'batch_size': TEST_BATCH_SIZE, 'shuffle': True, 'num_workers': NUM_WORKERS}
    data_loader = DataLoader(dataset, **test_params)

    total_examples = len(df)
    predictions = np.zeros([total_examples], dtype=object)

    for batch, data in enumerate(data_loader):
        input_ids = data['input_ids'].to(device)
        mask = data['attn_mask'].to(device)

        outputs = model(input_ids, mask)
        probs = torch.softmax(outputs[0], dim=1)
        big_val, big_idx = torch.max(probs, dim=1)
        star_predictions = (big_idx + 1).cpu().numpy()

        return star_predictions[0]

class ReviewsDataset(Dataset):
    def __init__(self, data, max_length=512):
        self.data = data
        self.tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')
        self.max_length = max_length

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        review = self.data.loc[idx, 'text']
        label = int(self.data.loc[idx, 'stars']) - 1

        encoded = self.tokenizer(
            review,
            add_special_tokens=True,
            max_length=self.max_length,
            padding='max_length',
            return_attention_mask=True,
            truncation=True
        )

        input_ids = encoded['input_ids']
        attn_mask = encoded['attention_mask']

        return {
            'input_ids': torch.tensor(input_ids),
            'attn_mask': torch.tensor(attn_mask),
            'label': torch.tensor(label)
        }

# Set up session state for navigation
if 'selected_product' not in st.session_state:
    st.session_state['selected_product'] = None

# Load BERT model from Google Drive
if 'model' not in st.session_state:
    st.write("Downloading BERT model from Google Drive...")
    file_id = st.text_input("https://drive.google.com/file/d/1wIszhqa1NQQs_Lx21u8oiOrK-12s_fiw/view?usp=drive_link")
    if st.button("Download and Load Model"):
        if file_id:
            model_file = "bert_model.bin"  # Set your desired file name
            download_file_from_google_drive(file_id, model_file)
            st.session_state['model'] = load_model(model_file)
            st.session_state['device'] = torch.device('cpu')
            st.success("Model loaded successfully.")
        else:
            st.error("Please enter a valid file ID.")

# Display homepage or product detail page based on selection
if st.session_state['selected_product'] is None:
    st.title("Petite Clothing and Shoe Store")
    st.write("Welcome to our store! Click on a product to view more details.")

    for product in products:
        if st.button(f"View {product['name']}"):
            st.session_state['selected_product'] = product['id']
else:
    # Product Detail Page
    product = next(p for p in products if p['id'] == st.session_state['selected_product'])
    st.write(f"## {product['name']}")
    st.write(product['description'])
    st.write(f"Price: ${product['price']}")

    st.write("### Reviews")
    for review in reviews:
        if review['product_id'] == product['id']:
            st.write(f"**{review['user']}**: {review['comment']} (Rating: {review['rating']}/5)")

    st.write("### Leave a Review")
    user = st.text_input("Your Name")
    comment = st.text_area("Comment")
    if st.button("Submit Review"):
        new_review = {"product_id": product['id'], "user": user, "comment": comment}
        reviews.append(new_review)
        st.success("Review submitted!")

        # Get AI model prediction
        if 'model' in st.session_state:
            prediction = get_single_prediction(comment, st.session_state['model'])
            st.write(f"Predicted rating: {prediction}/5")
        else:
            st.error("Model not loaded.")

    # Button to go back to homepage
    if st.button("Back to Home"):
        st.session_state['selected_product'] = None




